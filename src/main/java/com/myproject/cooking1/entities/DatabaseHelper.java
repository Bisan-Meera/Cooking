package com.myproject.cooking1.entities;

import com.myproject.cooking1.DBConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.UUID;

public class DatabaseHelper {

    public static int addChef(String name, String expertise, int activeTasks) {
        try (Connection conn = DBConnection.getConnection()) {
            String email = name.toLowerCase().replace(" ", "") + UUID.randomUUID().toString().substring(0, 6) + "@test.com";
            PreparedStatement insertChef = conn.prepareStatement(
                    "INSERT INTO Users (name, email, password, role, expertise) VALUES (?, ?, ?, 'chef', ?) RETURNING user_id"
            );
            insertChef.setString(1, name);
            insertChef.setString(2, email);
            insertChef.setString(3, "password123");
            insertChef.setString(4, expertise);

            ResultSet rs = insertChef.executeQuery();
            if (rs.next()) {
                int chefId = rs.getInt("user_id");

                for (int i = 0; i < activeTasks; i++) {
                    PreparedStatement taskStmt = conn.prepareStatement(
                            "INSERT INTO Tasks (assigned_to, task_type, status) VALUES (?, 'cooking', 'active')"
                    );
                    taskStmt.setInt(1, chefId);
                    taskStmt.executeUpdate();
                }

                return chefId;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;
    }




    public static int getChefIdByName(String chefName) {
        try (Connection conn = DBConnection.getConnection()) {
            PreparedStatement stmt = conn.prepareStatement("SELECT user_id FROM Users WHERE name = ? AND role = 'chef'");
            stmt.setString(1, chefName);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("user_id");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1; // Not found
    }

    public static void setChefTaskCount(int chefId, int count) {
        try (Connection conn = DBConnection.getConnection()) {
            // First, remove all existing tasks for this chef
            PreparedStatement delete = conn.prepareStatement("DELETE FROM Tasks WHERE assigned_to = ?");
            delete.setInt(1, chefId);
            delete.executeUpdate();

            // Add the specified number of tasks
            for (int i = 0; i < count; i++) {
                PreparedStatement insert = conn.prepareStatement(
                        "INSERT INTO Tasks (assigned_to, task_type, status) VALUES (?, 'cooking', 'active')"
                );
                insert.setInt(1, chefId);
                insert.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

//    public static void clearChefsAndTasks() {
//        try (Connection conn = DBConnection.getConnection()) {
//            conn.prepareStatement("DELETE FROM Tasks").executeUpdate();
//
//            // Only delete chefs that were generated by tests, not login users
//            PreparedStatement stmt = conn.prepareStatement(
//                    "DELETE FROM Users WHERE role = 'chef' AND email LIKE 'test_%@test.com'"
//            );
//
//            stmt.executeUpdate();
//
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//    }

    public static void clearChefsTasksOnly() {
        try (Connection conn = DBConnection.getConnection()) {
            PreparedStatement stmt = conn.prepareStatement(
                    "DELETE FROM Tasks WHERE assigned_to IN (SELECT user_id FROM Users WHERE role = 'chef')"
            );
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

}
